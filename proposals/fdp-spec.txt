	FreeDomo Protocol specification (FDP)
	
		Nils Vogels

0. Preliminary

	The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.

1. Overview

	This document specifies the FreeDomo Protocol

2. Roles

	The cornerstones of the FDP network are nodes, who MUST have at least
	one role. Currently the following roles are available:

	- MASTER
	- SLAVE
	- INPUT
	- OUTPUT
	- SENSOR
	- ACTUATOR

2.1 MASTER role
	
	Every FDP network MUST have exactly one MASTER node. The MASTER node
	MUST NOT have any other roles in the network.

	It is the sole task of the MASTER node to guard network integrity and
	accept new nodes into the network.

	The MASTER node also decides on the Network Identifier (NID), which
	acts as an addressing prefix for all nodes in the network.

2.2 SLAVE role

	An FDP network MAY have one or more SLAVE nodes. A SLAVE node MAY
	assume the role of MASTER once it has established that the original
	MASTER has failed and it is still able to contact over 50% of the
	original FDP network.

	A SLAVE node MUST receive a complete view of the network from the master
	on a regular basis, so it may perform role assumption properly

2.3 INPUT role

	A node that has an INPUT role is able to handle human input and MUST send
	this input to the paired node, or in it's absence the upstream for safe
	keeping.

2.4 OUTPUT role

	A node that has an OUTPUT role is able to display data in a
	human-interpretable way. Typical examples are LCD screens, indicator
	lights, etc. 

2.5 SENSOR role

	A node that has a SENSOR role is able to sense it's surroundings and
	MUST report this back to the requestor, or in it's absence the upstream 
	for safe keeping. 

2.6 ACTUATOR role

	A node that has an ACTUATOR role is able to take an action that
	influences the fysical surroundings of the node. A light illuminates,
	a garage door opens the door.

3 Messages

	Messages are the basis of processing updates and commands in FDP
	networks. All nodes MUST communicate via messages.

3.1 Message layout
	
	Messages MUST have a set layout, which looks like:

	+---------------------------------------------------------------------------+
	| Field  | NID | SAD | DAD | STYPE | MTYPE | MLEN | MDATA      | OPT | CRC  |
	+---------------------------------------------------------------------------+
	| Length | 1   | 2   | 2   | 2     | 1     | 2    | Up to 64kB |  1  |  4   |
        +---------------------------------------------------------------------------+
	Lengths are in bytes
	Min length: 16 bytes
	Max length: 65551 bytes


	The fields have the following formats:

	NID: The network-id. The network-id is a one-byte ID that has been
	determined by the MASTER upon network initialization. The main purpose 
	of the network-id is to distinguish the network for neighboring network 
	who may be within transmission rate of wireless equipment

	SAD: Source address. This is the address of the sender of a message

	DAD: Destination address. This is the address of the sender of a
	message

	STYPE: Source node type. The bitvalue of the source node type. This is
	used, combined with the message type if the message can be interpreted 
	by the receiving node

	MTYPE: Message type. This field indicates the type of message that
	follows in the MDATA field. It's value is the bitvalue of the
	message type that was sent.

	MLEN: Since the length of the MDATA field can vary, MLEN contains the
	length in bytes of the following MDATA field

	MDATA: The actual data of the message. If the data cell that is to be
	transmitted exceeds 64 bytes, it should be splitted into multiple messages.
	If multiple fields are transmitted, which do not carry their own
	label, the fields are seperated by 0xFFFF

	OPT: A bitfield indicating which options that are active in the sent message.
	Examples of options are a sequence number of the message, or a flag 
	indicating reassembly is needed

	CRC: A cyclic reduncancy check of the complete message.

3.2	Bitfield values

3.2.2	The following values SHOULD be used in construction of node type
	bitfield:
	
	UNUSED	 - 65536 - 256
	MASTER   - 128
	SLAVE    -  64
	INPUT    -  32
        OUTPUT   -  16
        SENSOR   -   8
        ACTUATOR -   4
        UNUSED   -   2
        UNUSED   -   1

	Since a node can have multiple roles, the values should be added to
	combine node roles.
	
	Example: A combined SENSOR / ACTUATOR node has a value of 12.

3.2.3	Currently message types are universal for all node types. A future
	version of FDP may allow different message types depending on the node
	type. To support this, the source node type is already present in any
	message.

	Typical MASTER messages:

	1 - SLAVE acknowledgement:
		This message is used by a master to acknowledge it has
		understood the slave role of a node and will replicate updates
		to the slave node
	2 - RE-INIT:
		This message indicates a need for the master to re-initialize
		the network. The MDATA field MAY include a new Network-ID, for
		instance to change Network-ID's. All non-MASTER nodes SHOULD
		start initializing in the mentioned Network-ID.
	3 - AMHERE:
		This message SHOULD only be sent to NID 0xFF as reply to a
		DISCOVER message to indicate the presence of a FDP network.
		MDATA SHOULD contain at least the NID the network is operating on
	4 - OFFER:
		This message indicates the wish of a MASTER to accept a
		node into the network, after it has requested. MDATA will
		contain the assigned address, which is unique inside the FDP
		network
	5 - WELCOME:
		This message concludes the process of a node joining the
		network and indicates the MASTER has processed the join
		succesfully. The node may now send non-initialization messages
	6 - DENY:
		This message indicates a node that the MASTER is not allowing
		network joins at this moment.
	7 - EVAC:
		This message indicates the wish of a MASTER to remove a node
		from the network. 
	8 - MCHECK:
		Check if another MASTER is answering messages.
	9 - CONFIG:
		Requests a complete config report from a node
	10 - TIME:
		Reports current time to a node. MDATA contains an offset to
		the epoch in seconds, day of week and time of day.
		Day of week is a 1-byte bitfield, time of day is 3 bytes,
		using military notation. First byte indicates hours, second byte indicates
		minutes, third indicates seconds.
	
		Day bitfield values:
		Monday - 1
		Tuesday - 2
		Wednesday - 4
		Thursday - 8
		Friday - 16
		Saturday - 32
		Sunday - 64

	Typical generic messages:

	16 - HELLO:
		This message is used by a master to see if a node is still
		alive. The master will embed a message-id in the MDATA field, 
		which the receiver should include in the reply. The used message in
		reply to a HELLO MUST be a HELLO message. The reply MUST be
		received within 5 x the maximum SLEEP time in the network, or the 
		MASTER MAY assume the node is unreachable
	17 - DISCOVER:
		This message MUST be sent to the special NID of 0xFF and
		destination address of 0xFFFF. This message is used to attempt to 
		discover an existing FDP network
	18 - KNOCK:
		This message is used by any non-master node to request to join
		a network. MDATA should contain the requested NID, ROLE bitfield
		and device serial#, and SHOULD be sent to the NID:0xFF and DAD:0xFFFF
	19 - OHAI:
		This message is used by any non-master node to confirm
		succesful configuration for a network. NID, SAD and DAD should be
		set appropriately, MDATA should contain the ROLE bitfield,
		node address and a string identifying running
		software/firmware. Note: Nodes SHOULD NOT send any other
		messages until WELCOME has been received from the MASTER
	20 - BUHBYE:
		This message is sent from a non-MASTER to a MASTER to indicate
		its intentions to leave the network gracefully. MDATA MAY contain 
		the unixtime in case this is a scheduled departure, for instance 
		due to planned node unavailability
	20 - TIMERQ:
		This message is used to request current time from the MASTER.
		The reported time is an offset to the epoch, aka unixtime.
	21 - HUH?:
		This message is used to request retransmission of a message,
		for instance due to CRC error. MDATA contains the sequence
		number of the latest correctly received message.
	22 - GETSCHED:
		Receives the bitfield of a schedule from a non-MASTER node
	23 - SETSCHED:
		Updates the bitfield of a schedule from a non-MASTER node

4. Network initalization

	In the case of a totally absent network, the following message-exchanges SHOULD
	take place, in chronological order:

	Any node, except candidate MASTER nodes:

		Send DISCOVER to NID:0xFF / DAD:0xFFFF, wait SLEEP_PERIOD for reply,
		retry until AMHERE received

		Upon reception of a AMHERE message if the offered NID is the
		NID we intended to join. Ignore if the NID is different

		Send KNOCK with NID:0xFF / DAD:0xFFFF and MDATA of required
		NID, ROLE bitfield and device serial#, wait SLEEP_PERIOD for 
		reception of OFFER, retry 10x SLEEP_PERIOD. If no OFFER is received,
		restart initialization.

		Upon reception of OFFER, the node MAY reset internal logic to
		initialize sensors, actuators, etc and send OHAI afterwards to
		the correct NID/DAD and MDATA of the device serial# wait SLEEP_PERIOD 
		for reception of WELCOME, retry 3x SLEEP_PERIOD. If no WELCOME is 
		received, restart initialization.

		If DENY is received, wait 30 x SLEEP_PERIOD and restart
		initialization.

		If WELCOME is received, the node has succesfully joined the
		network and is considered to be ready for more messages
	
		Network initialization is now complete. Usually this is
		followed by a CONFIG message from the MASTER, and possibly
		initialization statements

	Candidate MASTER node:

		Send DISCOVER to NID:0xFF / DAD:0xFFFF, wait SLEEP_PERIOD for
		reply, retry until a maximum of 3 retries

		Compare any received AMHERE with the intended NID to become
		MASTER for. If a MASTER is already present, the candidate
		MASTER MAY attempt to join the network as SLAVE, it SHOULD NOT
		continue initialization of the MASTER role

		If no AMHERE with the intended NID has been received, the NID
		is considered to be MASTER-less.

		Assume MASTER role for the NID and empty the list of nodes in
		the network, except for the MASTER node. Assign address to the
		MASTER node. The usual address for the MASTER node is 0x0001

5. Schedules

	FDP uses schedules to allow nodes to operate independently from a
	present MASTER. Schedules allow a single action to occur per role per
	minute. Schedules have the limited span of a week and start at Sunday
	0:00
	Each node SHOULD have the ability to store a schedule for each role it has. 

5.1 Schedule format

	A schedule has the maximum span of a week. One week is 10080 minutes.
	We add 20 extra positions for future use, giving a total of 11000
	switching moments.

	Each switching moment has 4 bits, of which a few are predetermined. 

	All this results in a complete switching schedule bitfield size of 5500 bytes.
	Any device storing a schedule SHOULD have 6kB available per schedule
	to store.

5.1.1	Schedule bit usage

	Schedules contain instructions for events, stored in a bitfield. The
	following bits are reserved:

	0000:	The device should switch off (ACTUATOR role)
	0001:	The device should switch on (ACTUATOR role)
	0010:	The device should read sensor 0 and report (SENSOR role)
	0011: 	The device should read sensor 1 and report (SENSOR role)
	0100:	The device is allowed to go into power saving (SENSOR+ACTUATOR role)
	1111:	The device should not change it's configuration

5.1.2	Schedule example

	This example details the structure of a schedule.

	Example data: An actuator node receives the following schedule:

	11110000111100011111

	Given that every minute is represented by 4 bits, and that schedules
	span a week, starting at Sunday 0:00, this gives us:

	Sun 0:00: 1111 -> Node takes no scheduled action
	Sun 0:01: 0000 -> Node switches off if it is an ACTUATOR
	Sun 0:02: 1111 -> Node takes no scheduled action
	Sun 0:03: 0001 -> Node switches on if it is an ACTUATOR
	Sun 0:04: 1111 -> Node takes no scheduled action

